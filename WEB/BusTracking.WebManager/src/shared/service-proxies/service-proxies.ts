/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    webAuthenticate(body: LoginRequestDto | undefined): Observable<AuthenticateResultModelResultDto> {
        let url_ = this.baseUrl + "/api/Auth/WebAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWebAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWebAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModelResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateResultModelResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processWebAuthenticate(response: HttpResponseBase): Observable<AuthenticateResultModelResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResultModelResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResultModelResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    appAuthenticate(body: LoginRequestDto | undefined): Observable<AuthenticateResultModelResultDto> {
        let url_ = this.baseUrl + "/api/Auth/AppAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAppAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModelResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateResultModelResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processAppAuthenticate(response: HttpResponseBase): Observable<AuthenticateResultModelResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResultModelResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResultModelResultDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAllRole(): Observable<RoleDtoListResultDto> {
        let url_ = this.baseUrl + "/api/Auth/GetAllRole";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRole(<any>response_);
                } catch (e) {
                    return <Observable<RoleDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoleDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllRole(response: HttpResponseBase): Observable<RoleDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoleDtoListResultDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUserSession(): Observable<UserSessionDtoResultDto> {
        let url_ = this.baseUrl + "/api/Auth/GetUserSession";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserSession(<any>response_);
                } catch (e) {
                    return <Observable<UserSessionDtoResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserSessionDtoResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserSession(response: HttpResponseBase): Observable<UserSessionDtoResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserSessionDtoResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserSessionDtoResultDto>(<any>null);
    }
}

@Injectable()
export class BusServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param licenseCode (optional) 
     * @param status (optional) 
     * @param driverName (optional) 
     * @param routeName (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAllPaging(licenseCode: string | null | undefined, status: number | null | undefined, driverName: string | null | undefined, routeName: string | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Observable<BusDtoPageResultDto> {
        let url_ = this.baseUrl + "/api/Bus/GetAllPaging?";
        if (licenseCode !== undefined)
            url_ += "LicenseCode=" + encodeURIComponent("" + licenseCode) + "&"; 
        if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&"; 
        if (driverName !== undefined)
            url_ += "DriverName=" + encodeURIComponent("" + driverName) + "&"; 
        if (routeName !== undefined)
            url_ += "RouteName=" + encodeURIComponent("" + routeName) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPaging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPaging(<any>response_);
                } catch (e) {
                    return <Observable<BusDtoPageResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusDtoPageResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPaging(response: HttpResponseBase): Observable<BusDtoPageResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusDtoPageResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusDtoPageResultDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | undefined): Observable<BusDtoResultDto> {
        let url_ = this.baseUrl + "/api/Bus/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<BusDtoResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusDtoResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<BusDtoResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusDtoResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusDtoResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateBusRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Bus/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateBusRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Bus/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Bus/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }
}

@Injectable()
export class DriverServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllDriverUnAssign(): Observable<DriverDtoListResultDto> {
        let url_ = this.baseUrl + "/api/Driver/GetAllDriverUnAssign";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllDriverUnAssign(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDriverUnAssign(<any>response_);
                } catch (e) {
                    return <Observable<DriverDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DriverDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllDriverUnAssign(response: HttpResponseBase): Observable<DriverDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DriverDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DriverDtoListResultDto>(<any>null);
    }

    /**
     * @param name (optional) 
     * @param phoneNumber (optional) 
     * @param status (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAllPaging(name: string | null | undefined, phoneNumber: string | null | undefined, status: number | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Observable<DriverDtoPageResultDto> {
        let url_ = this.baseUrl + "/api/Driver/GetAllPaging?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPaging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPaging(<any>response_);
                } catch (e) {
                    return <Observable<DriverDtoPageResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DriverDtoPageResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPaging(response: HttpResponseBase): Observable<DriverDtoPageResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DriverDtoPageResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DriverDtoPageResultDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | undefined): Observable<DriverDtoResultDto> {
        let url_ = this.baseUrl + "/api/Driver/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<DriverDtoResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DriverDtoResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<DriverDtoResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DriverDtoResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DriverDtoResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateDriverRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Driver/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateDriverRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Driver/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Driver/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }
}

@Injectable()
export class RouteServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllRouteUnAssign(): Observable<RouteDtoListResultDto> {
        let url_ = this.baseUrl + "/api/Route/GetAllRouteUnAssign";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRouteUnAssign(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRouteUnAssign(<any>response_);
                } catch (e) {
                    return <Observable<RouteDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RouteDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllRouteUnAssign(response: HttpResponseBase): Observable<RouteDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RouteDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RouteDtoListResultDto>(<any>null);
    }

    /**
     * @param routeCode (optional) 
     * @param name (optional) 
     * @param status (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAllPaging(routeCode: string | null | undefined, name: string | null | undefined, status: number | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Observable<RouteDtoPageResultDto> {
        let url_ = this.baseUrl + "/api/Route/GetAllPaging?";
        if (routeCode !== undefined)
            url_ += "RouteCode=" + encodeURIComponent("" + routeCode) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPaging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPaging(<any>response_);
                } catch (e) {
                    return <Observable<RouteDtoPageResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RouteDtoPageResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPaging(response: HttpResponseBase): Observable<RouteDtoPageResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RouteDtoPageResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RouteDtoPageResultDto>(<any>null);
    }

    /**
     * @return Success
     */
    get(id: number): Observable<RouteDtoResultDto> {
        let url_ = this.baseUrl + "/api/Route/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RouteDtoResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RouteDtoResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RouteDtoResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RouteDtoResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RouteDtoResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateRouteRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Route/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateRouteRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Route/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Route/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }
}

@Injectable()
export class StopServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param name (optional) 
     * @param address (optional) 
     * @param status (optional) 
     * @param routeId (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAllPaging(name: string | null | undefined, address: string | null | undefined, status: number | null | undefined, routeId: number | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Observable<StopDtoPageResultDto> {
        let url_ = this.baseUrl + "/api/Stop/GetAllPaging?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (address !== undefined)
            url_ += "Address=" + encodeURIComponent("" + address) + "&"; 
        if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&"; 
        if (routeId !== undefined)
            url_ += "RouteId=" + encodeURIComponent("" + routeId) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPaging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPaging(<any>response_);
                } catch (e) {
                    return <Observable<StopDtoPageResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StopDtoPageResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPaging(response: HttpResponseBase): Observable<StopDtoPageResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StopDtoPageResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StopDtoPageResultDto>(<any>null);
    }

    /**
     * @return Success
     */
    get(id: number): Observable<StopDtoResultDto> {
        let url_ = this.baseUrl + "/api/Stop/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<StopDtoResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StopDtoResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<StopDtoResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StopDtoResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StopDtoResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateStopRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Stop/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateStopRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Stop/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Stop/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }
}

@Injectable()
export class StudentServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param busName (optional) 
     * @param stopName (optional) 
     * @param studentStatus (optional) 
     * @param name (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAllPaging(busName: string | null | undefined, stopName: string | null | undefined, studentStatus: number | null | undefined, name: string | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Observable<StudentDtoPageResultDto> {
        let url_ = this.baseUrl + "/api/Student/GetAllPaging?";
        if (busName !== undefined)
            url_ += "BusName=" + encodeURIComponent("" + busName) + "&"; 
        if (stopName !== undefined)
            url_ += "StopName=" + encodeURIComponent("" + stopName) + "&"; 
        if (studentStatus !== undefined)
            url_ += "StudentStatus=" + encodeURIComponent("" + studentStatus) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPaging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPaging(<any>response_);
                } catch (e) {
                    return <Observable<StudentDtoPageResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentDtoPageResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPaging(response: HttpResponseBase): Observable<StudentDtoPageResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentDtoPageResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentDtoPageResultDto>(<any>null);
    }

    /**
     * @return Success
     */
    get(id: number): Observable<StudentDtoResultDto> {
        let url_ = this.baseUrl + "/api/Student/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<StudentDtoResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentDtoResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<StudentDtoResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentDtoResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentDtoResultDto>(<any>null);
    }

    /**
     * @param monitorId (optional) 
     * @return Success
     */
    getByMonitorId(monitorId: string | undefined): Observable<StudentDtoListResultDto> {
        let url_ = this.baseUrl + "/api/Student/GetByMonitorId?";
        if (monitorId === null)
            throw new Error("The parameter 'monitorId' cannot be null.");
        else if (monitorId !== undefined)
            url_ += "monitorId=" + encodeURIComponent("" + monitorId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByMonitorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByMonitorId(<any>response_);
                } catch (e) {
                    return <Observable<StudentDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetByMonitorId(response: HttpResponseBase): Observable<StudentDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentDtoListResultDto>(<any>null);
    }

    /**
     * @param parentId (optional) 
     * @return Success
     */
    getByParentId(parentId: string | undefined): Observable<StudentDtoListResultDto> {
        let url_ = this.baseUrl + "/api/Student/GetByParentId?";
        if (parentId === null)
            throw new Error("The parameter 'parentId' cannot be null.");
        else if (parentId !== undefined)
            url_ += "parentId=" + encodeURIComponent("" + parentId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByParentId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByParentId(<any>response_);
                } catch (e) {
                    return <Observable<StudentDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetByParentId(response: HttpResponseBase): Observable<StudentDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentDtoListResultDto>(<any>null);
    }

    /**
     * @param fromDate (optional) 
     * @param toDate (optional) 
     * @param studentName (optional) 
     * @param checkInResult (optional) 
     * @param busId (optional) 
     * @param checkInType (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getLogsCheckIn(fromDate: moment.Moment | undefined, toDate: moment.Moment | undefined, studentName: string | null | undefined, checkInResult: number | null | undefined, busId: number | null | undefined, checkInType: number | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Observable<StudentCheckInDtoPageResultDto> {
        let url_ = this.baseUrl + "/api/Student/GetLogsCheckIn?";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        if (studentName !== undefined)
            url_ += "StudentName=" + encodeURIComponent("" + studentName) + "&"; 
        if (checkInResult !== undefined)
            url_ += "CheckInResult=" + encodeURIComponent("" + checkInResult) + "&"; 
        if (busId !== undefined)
            url_ += "BusId=" + encodeURIComponent("" + busId) + "&"; 
        if (checkInType !== undefined)
            url_ += "CheckInType=" + encodeURIComponent("" + checkInType) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLogsCheckIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLogsCheckIn(<any>response_);
                } catch (e) {
                    return <Observable<StudentCheckInDtoPageResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentCheckInDtoPageResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetLogsCheckIn(response: HttpResponseBase): Observable<StudentCheckInDtoPageResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentCheckInDtoPageResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentCheckInDtoPageResultDto>(<any>null);
    }

    /**
     * @param monitorId (optional) 
     * @param fromDate (optional) 
     * @param toDate (optional) 
     * @return Success
     */
    getNotificationOfMonitor(monitorId: string | undefined, fromDate: moment.Moment | undefined, toDate: moment.Moment | undefined): Observable<NotificationDtoListResultDto> {
        let url_ = this.baseUrl + "/api/Student/GetNotificationOfMonitor?";
        if (monitorId === null)
            throw new Error("The parameter 'monitorId' cannot be null.");
        else if (monitorId !== undefined)
            url_ += "monitorId=" + encodeURIComponent("" + monitorId) + "&"; 
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNotificationOfMonitor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNotificationOfMonitor(<any>response_);
                } catch (e) {
                    return <Observable<NotificationDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NotificationDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetNotificationOfMonitor(response: HttpResponseBase): Observable<NotificationDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NotificationDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NotificationDtoListResultDto>(<any>null);
    }

    /**
     * @param parentId (optional) 
     * @param fromDate (optional) 
     * @param toDate (optional) 
     * @return Success
     */
    getNotificationOfParent(parentId: string | undefined, fromDate: moment.Moment | undefined, toDate: moment.Moment | undefined): Observable<NotificationDtoListResultDto> {
        let url_ = this.baseUrl + "/api/Student/GetNotificationOfParent?";
        if (parentId === null)
            throw new Error("The parameter 'parentId' cannot be null.");
        else if (parentId !== undefined)
            url_ += "parentId=" + encodeURIComponent("" + parentId) + "&"; 
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNotificationOfParent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNotificationOfParent(<any>response_);
                } catch (e) {
                    return <Observable<NotificationDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NotificationDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetNotificationOfParent(response: HttpResponseBase): Observable<NotificationDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NotificationDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NotificationDtoListResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    checkIn(body: CheckInRequestDto | undefined): Observable<StudentCheckInDtoResultDto> {
        let url_ = this.baseUrl + "/api/Student/CheckIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckIn(<any>response_);
                } catch (e) {
                    return <Observable<StudentCheckInDtoResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentCheckInDtoResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processCheckIn(response: HttpResponseBase): Observable<StudentCheckInDtoResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentCheckInDtoResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentCheckInDtoResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    takeLeave(body: CheckInRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Student/TakeLeave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTakeLeave(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTakeLeave(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processTakeLeave(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateStudentRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Student/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateStudentRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Student/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/Student/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMonitorUnAssign(): Observable<UserDtoListResultDto> {
        let url_ = this.baseUrl + "/api/User/GetAllMonitorUnAssign";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMonitorUnAssign(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMonitorUnAssign(<any>response_);
                } catch (e) {
                    return <Observable<UserDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMonitorUnAssign(response: HttpResponseBase): Observable<UserDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoListResultDto>(<any>null);
    }

    /**
     * @param type (optional) 
     * @return Success
     */
    getAllByType(type: number | undefined): Observable<UserDtoListResultDto> {
        let url_ = this.baseUrl + "/api/User/GetAllByType?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByType(<any>response_);
                } catch (e) {
                    return <Observable<UserDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByType(response: HttpResponseBase): Observable<UserDtoListResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoListResultDto>(<any>null);
    }

    /**
     * @param fullName (optional) 
     * @param userName (optional) 
     * @param phoneNumber (optional) 
     * @param typeAccount (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAllPaging(fullName: string | null | undefined, userName: string | null | undefined, phoneNumber: string | null | undefined, typeAccount: number | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Observable<UserDtoPageResultDto> {
        let url_ = this.baseUrl + "/api/User/GetAllPaging?";
        if (fullName !== undefined)
            url_ += "FullName=" + encodeURIComponent("" + fullName) + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (typeAccount !== undefined)
            url_ += "TypeAccount=" + encodeURIComponent("" + typeAccount) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPaging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPaging(<any>response_);
                } catch (e) {
                    return <Observable<UserDtoPageResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDtoPageResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPaging(response: HttpResponseBase): Observable<UserDtoPageResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoPageResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoPageResultDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById(id: string | undefined): Observable<UserDtoResultDto> {
        let url_ = this.baseUrl + "/api/User/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<UserDtoResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDtoResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<UserDtoResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResultDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createUser(body: CreateUserRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/User/CreateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateUserRequestDto | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/User/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/User/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    assignRole(body: RoleAssignRequest | undefined): Observable<ResponseDto> {
        let url_ = this.baseUrl + "/api/User/AssignRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssignRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssignRole(<any>response_);
                } catch (e) {
                    return <Observable<ResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processAssignRole(response: HttpResponseBase): Observable<ResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseDto>(<any>null);
    }
}

export class LoginRequestDto implements ILoginRequestDto {
    userName: string | undefined;
    password: string | undefined;
    rememberMe: boolean;

    constructor(data?: ILoginRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
            this.rememberMe = data["rememberMe"];
        }
    }

    static fromJS(data: any): LoginRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        return data; 
    }

    clone(): LoginRequestDto {
        const json = this.toJSON();
        let result = new LoginRequestDto();
        result.init(json);
        return result;
    }
}

export interface ILoginRequestDto {
    userName: string | undefined;
    password: string | undefined;
    rememberMe: boolean;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    userId: string | undefined;
    fullName: string | undefined;
    typeAccount: number;
    email: string | undefined;
    roles: string[] | undefined;
    accessToken: string | undefined;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.fullName = data["fullName"];
            this.typeAccount = data["typeAccount"];
            this.email = data["email"];
            if (Array.isArray(data["roles"])) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles.push(item);
            }
            this.accessToken = data["accessToken"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["fullName"] = this.fullName;
        data["typeAccount"] = this.typeAccount;
        data["email"] = this.email;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["accessToken"] = this.accessToken;
        return data; 
    }

    clone(): AuthenticateResultModel {
        const json = this.toJSON();
        let result = new AuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateResultModel {
    userId: string | undefined;
    fullName: string | undefined;
    typeAccount: number;
    email: string | undefined;
    roles: string[] | undefined;
    accessToken: string | undefined;
}

export class AuthenticateResultModelResultDto implements IAuthenticateResultModelResultDto {
    result: AuthenticateResultModel;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IAuthenticateResultModelResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? AuthenticateResultModel.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): AuthenticateResultModelResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModelResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): AuthenticateResultModelResultDto {
        const json = this.toJSON();
        let result = new AuthenticateResultModelResultDto();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateResultModelResultDto {
    result: AuthenticateResultModel;
    statusCode: string | undefined;
    message: string | undefined;
}

export class RoleDto implements IRoleDto {
    id: string;
    name: string | undefined;
    normalizedName: string | undefined;
    description: string | undefined;
    displayName: string | undefined;

    constructor(data?: IRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.normalizedName = data["normalizedName"];
            this.description = data["description"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        return data; 
    }

    clone(): RoleDto {
        const json = this.toJSON();
        let result = new RoleDto();
        result.init(json);
        return result;
    }
}

export interface IRoleDto {
    id: string;
    name: string | undefined;
    normalizedName: string | undefined;
    description: string | undefined;
    displayName: string | undefined;
}

export class RoleDtoListResultDto implements IRoleDtoListResultDto {
    result: RoleDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IRoleDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(RoleDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): RoleDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): RoleDtoListResultDto {
        const json = this.toJSON();
        let result = new RoleDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IRoleDtoListResultDto {
    result: RoleDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class UserSessionDto implements IUserSessionDto {
    userId: string | undefined;
    fullName: string | undefined;
    email: string | undefined;
    roles: string[] | undefined;

    constructor(data?: IUserSessionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.fullName = data["fullName"];
            this.email = data["email"];
            if (Array.isArray(data["roles"])) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles.push(item);
            }
        }
    }

    static fromJS(data: any): UserSessionDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserSessionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data; 
    }

    clone(): UserSessionDto {
        const json = this.toJSON();
        let result = new UserSessionDto();
        result.init(json);
        return result;
    }
}

export interface IUserSessionDto {
    userId: string | undefined;
    fullName: string | undefined;
    email: string | undefined;
    roles: string[] | undefined;
}

export class UserSessionDtoResultDto implements IUserSessionDtoResultDto {
    result: UserSessionDto;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IUserSessionDtoResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? UserSessionDto.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): UserSessionDtoResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserSessionDtoResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): UserSessionDtoResultDto {
        const json = this.toJSON();
        let result = new UserSessionDtoResultDto();
        result.init(json);
        return result;
    }
}

export interface IUserSessionDtoResultDto {
    result: UserSessionDto;
    statusCode: string | undefined;
    message: string | undefined;
}

export class BusDto implements IBusDto {
    id: number;
    name: string | undefined;
    licenseCode: string | undefined;
    maxSize: number;
    maxSpeed: number;
    description: string | undefined;
    status: number;
    driverId: number | undefined;
    driverName: string | undefined;
    monitorId: string | undefined;
    monitorName: string | undefined;
    routeId: number | undefined;
    routeName: string | undefined;

    constructor(data?: IBusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.licenseCode = data["licenseCode"];
            this.maxSize = data["maxSize"];
            this.maxSpeed = data["maxSpeed"];
            this.description = data["description"];
            this.status = data["status"];
            this.driverId = data["driverId"];
            this.driverName = data["driverName"];
            this.monitorId = data["monitorId"];
            this.monitorName = data["monitorName"];
            this.routeId = data["routeId"];
            this.routeName = data["routeName"];
        }
    }

    static fromJS(data: any): BusDto {
        data = typeof data === 'object' ? data : {};
        let result = new BusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["licenseCode"] = this.licenseCode;
        data["maxSize"] = this.maxSize;
        data["maxSpeed"] = this.maxSpeed;
        data["description"] = this.description;
        data["status"] = this.status;
        data["driverId"] = this.driverId;
        data["driverName"] = this.driverName;
        data["monitorId"] = this.monitorId;
        data["monitorName"] = this.monitorName;
        data["routeId"] = this.routeId;
        data["routeName"] = this.routeName;
        return data; 
    }

    clone(): BusDto {
        const json = this.toJSON();
        let result = new BusDto();
        result.init(json);
        return result;
    }
}

export interface IBusDto {
    id: number;
    name: string | undefined;
    licenseCode: string | undefined;
    maxSize: number;
    maxSpeed: number;
    description: string | undefined;
    status: number;
    driverId: number | undefined;
    driverName: string | undefined;
    monitorId: string | undefined;
    monitorName: string | undefined;
    routeId: number | undefined;
    routeName: string | undefined;
}

export class BusDtoPageResultDto implements IBusDtoPageResultDto {
    totalRecord: number;
    items: BusDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IBusDtoPageResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalRecord = data["totalRecord"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(BusDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): BusDtoPageResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BusDtoPageResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRecord"] = this.totalRecord;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): BusDtoPageResultDto {
        const json = this.toJSON();
        let result = new BusDtoPageResultDto();
        result.init(json);
        return result;
    }
}

export interface IBusDtoPageResultDto {
    totalRecord: number;
    items: BusDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class BusDtoResultDto implements IBusDtoResultDto {
    result: BusDto;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IBusDtoResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? BusDto.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): BusDtoResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BusDtoResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): BusDtoResultDto {
        const json = this.toJSON();
        let result = new BusDtoResultDto();
        result.init(json);
        return result;
    }
}

export interface IBusDtoResultDto {
    result: BusDto;
    statusCode: string | undefined;
    message: string | undefined;
}

export class CreateBusRequestDto implements ICreateBusRequestDto {
    licenseCode: string | undefined;
    name: string | undefined;
    maxSize: number;
    maxSpeed: number;
    description: string | undefined;
    status: number;
    driverId: number | undefined;
    monitorId: string | undefined;
    routeId: number | undefined;

    constructor(data?: ICreateBusRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.licenseCode = data["licenseCode"];
            this.name = data["name"];
            this.maxSize = data["maxSize"];
            this.maxSpeed = data["maxSpeed"];
            this.description = data["description"];
            this.status = data["status"];
            this.driverId = data["driverId"];
            this.monitorId = data["monitorId"];
            this.routeId = data["routeId"];
        }
    }

    static fromJS(data: any): CreateBusRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBusRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["licenseCode"] = this.licenseCode;
        data["name"] = this.name;
        data["maxSize"] = this.maxSize;
        data["maxSpeed"] = this.maxSpeed;
        data["description"] = this.description;
        data["status"] = this.status;
        data["driverId"] = this.driverId;
        data["monitorId"] = this.monitorId;
        data["routeId"] = this.routeId;
        return data; 
    }

    clone(): CreateBusRequestDto {
        const json = this.toJSON();
        let result = new CreateBusRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICreateBusRequestDto {
    licenseCode: string | undefined;
    name: string | undefined;
    maxSize: number;
    maxSpeed: number;
    description: string | undefined;
    status: number;
    driverId: number | undefined;
    monitorId: string | undefined;
    routeId: number | undefined;
}

export class ResponseDto implements IResponseDto {
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): ResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): ResponseDto {
        const json = this.toJSON();
        let result = new ResponseDto();
        result.init(json);
        return result;
    }
}

export interface IResponseDto {
    statusCode: string | undefined;
    message: string | undefined;
}

export class UpdateBusRequestDto implements IUpdateBusRequestDto {
    id: number;
    licenseCode: string | undefined;
    name: string | undefined;
    maxSize: number;
    maxSpeed: number;
    description: string | undefined;
    status: number;
    driverId: number | undefined;
    monitorId: string | undefined;
    routeId: number | undefined;

    constructor(data?: IUpdateBusRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.licenseCode = data["licenseCode"];
            this.name = data["name"];
            this.maxSize = data["maxSize"];
            this.maxSpeed = data["maxSpeed"];
            this.description = data["description"];
            this.status = data["status"];
            this.driverId = data["driverId"];
            this.monitorId = data["monitorId"];
            this.routeId = data["routeId"];
        }
    }

    static fromJS(data: any): UpdateBusRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBusRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["licenseCode"] = this.licenseCode;
        data["name"] = this.name;
        data["maxSize"] = this.maxSize;
        data["maxSpeed"] = this.maxSpeed;
        data["description"] = this.description;
        data["status"] = this.status;
        data["driverId"] = this.driverId;
        data["monitorId"] = this.monitorId;
        data["routeId"] = this.routeId;
        return data; 
    }

    clone(): UpdateBusRequestDto {
        const json = this.toJSON();
        let result = new UpdateBusRequestDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateBusRequestDto {
    id: number;
    licenseCode: string | undefined;
    name: string | undefined;
    maxSize: number;
    maxSpeed: number;
    description: string | undefined;
    status: number;
    driverId: number | undefined;
    monitorId: string | undefined;
    routeId: number | undefined;
}

export class DriverDto implements IDriverDto {
    id: number;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    status: number;

    constructor(data?: IDriverDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): DriverDto {
        data = typeof data === 'object' ? data : {};
        let result = new DriverDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["status"] = this.status;
        return data; 
    }

    clone(): DriverDto {
        const json = this.toJSON();
        let result = new DriverDto();
        result.init(json);
        return result;
    }
}

export interface IDriverDto {
    id: number;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    status: number;
}

export class DriverDtoListResultDto implements IDriverDtoListResultDto {
    result: DriverDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IDriverDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(DriverDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): DriverDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new DriverDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): DriverDtoListResultDto {
        const json = this.toJSON();
        let result = new DriverDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IDriverDtoListResultDto {
    result: DriverDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class DriverDtoPageResultDto implements IDriverDtoPageResultDto {
    totalRecord: number;
    items: DriverDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IDriverDtoPageResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalRecord = data["totalRecord"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(DriverDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): DriverDtoPageResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new DriverDtoPageResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRecord"] = this.totalRecord;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): DriverDtoPageResultDto {
        const json = this.toJSON();
        let result = new DriverDtoPageResultDto();
        result.init(json);
        return result;
    }
}

export interface IDriverDtoPageResultDto {
    totalRecord: number;
    items: DriverDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class DriverDtoResultDto implements IDriverDtoResultDto {
    result: DriverDto;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IDriverDtoResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? DriverDto.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): DriverDtoResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new DriverDtoResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): DriverDtoResultDto {
        const json = this.toJSON();
        let result = new DriverDtoResultDto();
        result.init(json);
        return result;
    }
}

export interface IDriverDtoResultDto {
    result: DriverDto;
    statusCode: string | undefined;
    message: string | undefined;
}

export class CreateDriverRequestDto implements ICreateDriverRequestDto {
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    status: number;

    constructor(data?: ICreateDriverRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): CreateDriverRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDriverRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["status"] = this.status;
        return data; 
    }

    clone(): CreateDriverRequestDto {
        const json = this.toJSON();
        let result = new CreateDriverRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICreateDriverRequestDto {
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    status: number;
}

export class UpdateDriverRequestDto implements IUpdateDriverRequestDto {
    id: number;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    status: number;

    constructor(data?: IUpdateDriverRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): UpdateDriverRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDriverRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["status"] = this.status;
        return data; 
    }

    clone(): UpdateDriverRequestDto {
        const json = this.toJSON();
        let result = new UpdateDriverRequestDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateDriverRequestDto {
    id: number;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    status: number;
}

export class RouteDto implements IRouteDto {
    id: number;
    routeCode: string | undefined;
    name: string | undefined;
    distance: number;
    description: string | undefined;
    status: number;

    constructor(data?: IRouteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.routeCode = data["routeCode"];
            this.name = data["name"];
            this.distance = data["distance"];
            this.description = data["description"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): RouteDto {
        data = typeof data === 'object' ? data : {};
        let result = new RouteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["routeCode"] = this.routeCode;
        data["name"] = this.name;
        data["distance"] = this.distance;
        data["description"] = this.description;
        data["status"] = this.status;
        return data; 
    }

    clone(): RouteDto {
        const json = this.toJSON();
        let result = new RouteDto();
        result.init(json);
        return result;
    }
}

export interface IRouteDto {
    id: number;
    routeCode: string | undefined;
    name: string | undefined;
    distance: number;
    description: string | undefined;
    status: number;
}

export class RouteDtoListResultDto implements IRouteDtoListResultDto {
    result: RouteDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IRouteDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(RouteDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): RouteDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RouteDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): RouteDtoListResultDto {
        const json = this.toJSON();
        let result = new RouteDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IRouteDtoListResultDto {
    result: RouteDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class RouteDtoPageResultDto implements IRouteDtoPageResultDto {
    totalRecord: number;
    items: RouteDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IRouteDtoPageResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalRecord = data["totalRecord"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(RouteDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): RouteDtoPageResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RouteDtoPageResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRecord"] = this.totalRecord;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): RouteDtoPageResultDto {
        const json = this.toJSON();
        let result = new RouteDtoPageResultDto();
        result.init(json);
        return result;
    }
}

export interface IRouteDtoPageResultDto {
    totalRecord: number;
    items: RouteDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class RouteDtoResultDto implements IRouteDtoResultDto {
    result: RouteDto;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IRouteDtoResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? RouteDto.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): RouteDtoResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RouteDtoResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): RouteDtoResultDto {
        const json = this.toJSON();
        let result = new RouteDtoResultDto();
        result.init(json);
        return result;
    }
}

export interface IRouteDtoResultDto {
    result: RouteDto;
    statusCode: string | undefined;
    message: string | undefined;
}

export class CreateRouteRequestDto implements ICreateRouteRequestDto {
    routeCode: string | undefined;
    name: string | undefined;
    distance: number;
    description: string | undefined;
    status: number;

    constructor(data?: ICreateRouteRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.routeCode = data["routeCode"];
            this.name = data["name"];
            this.distance = data["distance"];
            this.description = data["description"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): CreateRouteRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRouteRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["routeCode"] = this.routeCode;
        data["name"] = this.name;
        data["distance"] = this.distance;
        data["description"] = this.description;
        data["status"] = this.status;
        return data; 
    }

    clone(): CreateRouteRequestDto {
        const json = this.toJSON();
        let result = new CreateRouteRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICreateRouteRequestDto {
    routeCode: string | undefined;
    name: string | undefined;
    distance: number;
    description: string | undefined;
    status: number;
}

export class UpdateRouteRequestDto implements IUpdateRouteRequestDto {
    id: number;
    routeCode: string | undefined;
    name: string | undefined;
    distance: number;
    description: string | undefined;
    status: number;

    constructor(data?: IUpdateRouteRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.routeCode = data["routeCode"];
            this.name = data["name"];
            this.distance = data["distance"];
            this.description = data["description"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): UpdateRouteRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRouteRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["routeCode"] = this.routeCode;
        data["name"] = this.name;
        data["distance"] = this.distance;
        data["description"] = this.description;
        data["status"] = this.status;
        return data; 
    }

    clone(): UpdateRouteRequestDto {
        const json = this.toJSON();
        let result = new UpdateRouteRequestDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateRouteRequestDto {
    id: number;
    routeCode: string | undefined;
    name: string | undefined;
    distance: number;
    description: string | undefined;
    status: number;
}

export class TimeSpan implements ITimeSpan {
    readonly ticks: number;
    readonly days: number;
    readonly hours: number;
    readonly milliseconds: number;
    readonly minutes: number;
    readonly seconds: number;
    readonly totalDays: number;
    readonly totalHours: number;
    readonly totalMilliseconds: number;
    readonly totalMinutes: number;
    readonly totalSeconds: number;

    constructor(data?: ITimeSpan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).ticks = data["ticks"];
            (<any>this).days = data["days"];
            (<any>this).hours = data["hours"];
            (<any>this).milliseconds = data["milliseconds"];
            (<any>this).minutes = data["minutes"];
            (<any>this).seconds = data["seconds"];
            (<any>this).totalDays = data["totalDays"];
            (<any>this).totalHours = data["totalHours"];
            (<any>this).totalMilliseconds = data["totalMilliseconds"];
            (<any>this).totalMinutes = data["totalMinutes"];
            (<any>this).totalSeconds = data["totalSeconds"];
        }
    }

    static fromJS(data: any): TimeSpan {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSpan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticks"] = this.ticks;
        data["days"] = this.days;
        data["hours"] = this.hours;
        data["milliseconds"] = this.milliseconds;
        data["minutes"] = this.minutes;
        data["seconds"] = this.seconds;
        data["totalDays"] = this.totalDays;
        data["totalHours"] = this.totalHours;
        data["totalMilliseconds"] = this.totalMilliseconds;
        data["totalMinutes"] = this.totalMinutes;
        data["totalSeconds"] = this.totalSeconds;
        return data; 
    }

    clone(): TimeSpan {
        const json = this.toJSON();
        let result = new TimeSpan();
        result.init(json);
        return result;
    }
}

export interface ITimeSpan {
    ticks: number;
    days: number;
    hours: number;
    milliseconds: number;
    minutes: number;
    seconds: number;
    totalDays: number;
    totalHours: number;
    totalMilliseconds: number;
    totalMinutes: number;
    totalSeconds: number;
}

export class StopDto implements IStopDto {
    id: number;
    name: string | undefined;
    address: string | undefined;
    numberOfStudents: number;
    timePickUp: TimeSpan;
    timeDropOff: TimeSpan;
    status: number;
    longitude: number;
    latitude: number;
    typeStop: number;
    routeId: number | undefined;
    routeName: string | undefined;

    constructor(data?: IStopDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.address = data["address"];
            this.numberOfStudents = data["numberOfStudents"];
            this.timePickUp = data["timePickUp"] ? TimeSpan.fromJS(data["timePickUp"]) : <any>undefined;
            this.timeDropOff = data["timeDropOff"] ? TimeSpan.fromJS(data["timeDropOff"]) : <any>undefined;
            this.status = data["status"];
            this.longitude = data["longitude"];
            this.latitude = data["latitude"];
            this.typeStop = data["typeStop"];
            this.routeId = data["routeId"];
            this.routeName = data["routeName"];
        }
    }

    static fromJS(data: any): StopDto {
        data = typeof data === 'object' ? data : {};
        let result = new StopDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["address"] = this.address;
        data["numberOfStudents"] = this.numberOfStudents;
        data["timePickUp"] = this.timePickUp ? this.timePickUp.toJSON() : <any>undefined;
        data["timeDropOff"] = this.timeDropOff ? this.timeDropOff.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["typeStop"] = this.typeStop;
        data["routeId"] = this.routeId;
        data["routeName"] = this.routeName;
        return data; 
    }

    clone(): StopDto {
        const json = this.toJSON();
        let result = new StopDto();
        result.init(json);
        return result;
    }
}

export interface IStopDto {
    id: number;
    name: string | undefined;
    address: string | undefined;
    numberOfStudents: number;
    timePickUp: TimeSpan;
    timeDropOff: TimeSpan;
    status: number;
    longitude: number;
    latitude: number;
    typeStop: number;
    routeId: number | undefined;
    routeName: string | undefined;
}

export class StopDtoPageResultDto implements IStopDtoPageResultDto {
    totalRecord: number;
    items: StopDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IStopDtoPageResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalRecord = data["totalRecord"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(StopDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): StopDtoPageResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StopDtoPageResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRecord"] = this.totalRecord;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): StopDtoPageResultDto {
        const json = this.toJSON();
        let result = new StopDtoPageResultDto();
        result.init(json);
        return result;
    }
}

export interface IStopDtoPageResultDto {
    totalRecord: number;
    items: StopDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class StopDtoResultDto implements IStopDtoResultDto {
    result: StopDto;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IStopDtoResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? StopDto.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): StopDtoResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StopDtoResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): StopDtoResultDto {
        const json = this.toJSON();
        let result = new StopDtoResultDto();
        result.init(json);
        return result;
    }
}

export interface IStopDtoResultDto {
    result: StopDto;
    statusCode: string | undefined;
    message: string | undefined;
}

export class CreateStopRequestDto implements ICreateStopRequestDto {
    name: string | undefined;
    address: string | undefined;
    numberOfStudents: number;
    hourPickUp: number;
    minutePickUp: number;
    hourDropOff: number;
    minuteDropOff: number;
    status: number;
    longitude: number;
    latitude: number;
    typeStop: number;
    routeId: number;

    constructor(data?: ICreateStopRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.address = data["address"];
            this.numberOfStudents = data["numberOfStudents"];
            this.hourPickUp = data["hourPickUp"];
            this.minutePickUp = data["minutePickUp"];
            this.hourDropOff = data["hourDropOff"];
            this.minuteDropOff = data["minuteDropOff"];
            this.status = data["status"];
            this.longitude = data["longitude"];
            this.latitude = data["latitude"];
            this.typeStop = data["typeStop"];
            this.routeId = data["routeId"];
        }
    }

    static fromJS(data: any): CreateStopRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStopRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["numberOfStudents"] = this.numberOfStudents;
        data["hourPickUp"] = this.hourPickUp;
        data["minutePickUp"] = this.minutePickUp;
        data["hourDropOff"] = this.hourDropOff;
        data["minuteDropOff"] = this.minuteDropOff;
        data["status"] = this.status;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["typeStop"] = this.typeStop;
        data["routeId"] = this.routeId;
        return data; 
    }

    clone(): CreateStopRequestDto {
        const json = this.toJSON();
        let result = new CreateStopRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICreateStopRequestDto {
    name: string | undefined;
    address: string | undefined;
    numberOfStudents: number;
    hourPickUp: number;
    minutePickUp: number;
    hourDropOff: number;
    minuteDropOff: number;
    status: number;
    longitude: number;
    latitude: number;
    typeStop: number;
    routeId: number;
}

export class UpdateStopRequestDto implements IUpdateStopRequestDto {
    id: number;
    name: string | undefined;
    address: string | undefined;
    numberOfStudents: number;
    hourPickUp: number;
    minutePickUp: number;
    hourDropOff: number;
    minuteDropOff: number;
    status: number;
    longitude: number;
    latitude: number;
    typeStop: number;
    routeId: number;

    constructor(data?: IUpdateStopRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.address = data["address"];
            this.numberOfStudents = data["numberOfStudents"];
            this.hourPickUp = data["hourPickUp"];
            this.minutePickUp = data["minutePickUp"];
            this.hourDropOff = data["hourDropOff"];
            this.minuteDropOff = data["minuteDropOff"];
            this.status = data["status"];
            this.longitude = data["longitude"];
            this.latitude = data["latitude"];
            this.typeStop = data["typeStop"];
            this.routeId = data["routeId"];
        }
    }

    static fromJS(data: any): UpdateStopRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStopRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["address"] = this.address;
        data["numberOfStudents"] = this.numberOfStudents;
        data["hourPickUp"] = this.hourPickUp;
        data["minutePickUp"] = this.minutePickUp;
        data["hourDropOff"] = this.hourDropOff;
        data["minuteDropOff"] = this.minuteDropOff;
        data["status"] = this.status;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["typeStop"] = this.typeStop;
        data["routeId"] = this.routeId;
        return data; 
    }

    clone(): UpdateStopRequestDto {
        const json = this.toJSON();
        let result = new UpdateStopRequestDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateStopRequestDto {
    id: number;
    name: string | undefined;
    address: string | undefined;
    numberOfStudents: number;
    hourPickUp: number;
    minutePickUp: number;
    hourDropOff: number;
    minuteDropOff: number;
    status: number;
    longitude: number;
    latitude: number;
    typeStop: number;
    routeId: number;
}

export class StudentDto implements IStudentDto {
    id: number;
    busId: number;
    busName: string | undefined;
    monitorId: string;
    monitorName: string | undefined;
    phoneMonitor: string | undefined;
    parentId: string;
    parentName: string | undefined;
    phoneParent: string | undefined;
    teacherName: string | undefined;
    phoneTeacher: string | undefined;
    classOfStudent: string | undefined;
    stopId: number;
    stopName: string | undefined;
    stopAddress: string | undefined;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    status: number;

    constructor(data?: IStudentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.busId = data["busId"];
            this.busName = data["busName"];
            this.monitorId = data["monitorId"];
            this.monitorName = data["monitorName"];
            this.phoneMonitor = data["phoneMonitor"];
            this.parentId = data["parentId"];
            this.parentName = data["parentName"];
            this.phoneParent = data["phoneParent"];
            this.teacherName = data["teacherName"];
            this.phoneTeacher = data["phoneTeacher"];
            this.classOfStudent = data["classOfStudent"];
            this.stopId = data["stopId"];
            this.stopName = data["stopName"];
            this.stopAddress = data["stopAddress"];
            this.name = data["name"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): StudentDto {
        data = typeof data === 'object' ? data : {};
        let result = new StudentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["busId"] = this.busId;
        data["busName"] = this.busName;
        data["monitorId"] = this.monitorId;
        data["monitorName"] = this.monitorName;
        data["phoneMonitor"] = this.phoneMonitor;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["phoneParent"] = this.phoneParent;
        data["teacherName"] = this.teacherName;
        data["phoneTeacher"] = this.phoneTeacher;
        data["classOfStudent"] = this.classOfStudent;
        data["stopId"] = this.stopId;
        data["stopName"] = this.stopName;
        data["stopAddress"] = this.stopAddress;
        data["name"] = this.name;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["status"] = this.status;
        return data; 
    }

    clone(): StudentDto {
        const json = this.toJSON();
        let result = new StudentDto();
        result.init(json);
        return result;
    }
}

export interface IStudentDto {
    id: number;
    busId: number;
    busName: string | undefined;
    monitorId: string;
    monitorName: string | undefined;
    phoneMonitor: string | undefined;
    parentId: string;
    parentName: string | undefined;
    phoneParent: string | undefined;
    teacherName: string | undefined;
    phoneTeacher: string | undefined;
    classOfStudent: string | undefined;
    stopId: number;
    stopName: string | undefined;
    stopAddress: string | undefined;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    status: number;
}

export class StudentDtoPageResultDto implements IStudentDtoPageResultDto {
    totalRecord: number;
    items: StudentDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IStudentDtoPageResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalRecord = data["totalRecord"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(StudentDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): StudentDtoPageResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StudentDtoPageResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRecord"] = this.totalRecord;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): StudentDtoPageResultDto {
        const json = this.toJSON();
        let result = new StudentDtoPageResultDto();
        result.init(json);
        return result;
    }
}

export interface IStudentDtoPageResultDto {
    totalRecord: number;
    items: StudentDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class StudentDtoResultDto implements IStudentDtoResultDto {
    result: StudentDto;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IStudentDtoResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? StudentDto.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): StudentDtoResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StudentDtoResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): StudentDtoResultDto {
        const json = this.toJSON();
        let result = new StudentDtoResultDto();
        result.init(json);
        return result;
    }
}

export interface IStudentDtoResultDto {
    result: StudentDto;
    statusCode: string | undefined;
    message: string | undefined;
}

export class StudentDtoListResultDto implements IStudentDtoListResultDto {
    result: StudentDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IStudentDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(StudentDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): StudentDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StudentDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): StudentDtoListResultDto {
        const json = this.toJSON();
        let result = new StudentDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IStudentDtoListResultDto {
    result: StudentDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class StudentCheckInDto implements IStudentCheckInDto {
    id: number;
    studentId: number;
    parentId: string;
    monitorId: string | undefined;
    monitorName: string | undefined;
    studentName: string | undefined;
    busName: string | undefined;
    checkInType: number;
    checkInTime: moment.Moment;
    longitude: number;
    latitude: number;
    checkInResult: number;

    constructor(data?: IStudentCheckInDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.studentId = data["studentId"];
            this.parentId = data["parentId"];
            this.monitorId = data["monitorId"];
            this.monitorName = data["monitorName"];
            this.studentName = data["studentName"];
            this.busName = data["busName"];
            this.checkInType = data["checkInType"];
            this.checkInTime = data["checkInTime"] ? moment(data["checkInTime"].toString()) : <any>undefined;
            this.longitude = data["longitude"];
            this.latitude = data["latitude"];
            this.checkInResult = data["checkInResult"];
        }
    }

    static fromJS(data: any): StudentCheckInDto {
        data = typeof data === 'object' ? data : {};
        let result = new StudentCheckInDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["studentId"] = this.studentId;
        data["parentId"] = this.parentId;
        data["monitorId"] = this.monitorId;
        data["monitorName"] = this.monitorName;
        data["studentName"] = this.studentName;
        data["busName"] = this.busName;
        data["checkInType"] = this.checkInType;
        data["checkInTime"] = this.checkInTime ? this.checkInTime.toISOString() : <any>undefined;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["checkInResult"] = this.checkInResult;
        return data; 
    }

    clone(): StudentCheckInDto {
        const json = this.toJSON();
        let result = new StudentCheckInDto();
        result.init(json);
        return result;
    }
}

export interface IStudentCheckInDto {
    id: number;
    studentId: number;
    parentId: string;
    monitorId: string | undefined;
    monitorName: string | undefined;
    studentName: string | undefined;
    busName: string | undefined;
    checkInType: number;
    checkInTime: moment.Moment;
    longitude: number;
    latitude: number;
    checkInResult: number;
}

export class StudentCheckInDtoPageResultDto implements IStudentCheckInDtoPageResultDto {
    totalRecord: number;
    items: StudentCheckInDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IStudentCheckInDtoPageResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalRecord = data["totalRecord"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(StudentCheckInDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): StudentCheckInDtoPageResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StudentCheckInDtoPageResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRecord"] = this.totalRecord;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): StudentCheckInDtoPageResultDto {
        const json = this.toJSON();
        let result = new StudentCheckInDtoPageResultDto();
        result.init(json);
        return result;
    }
}

export interface IStudentCheckInDtoPageResultDto {
    totalRecord: number;
    items: StudentCheckInDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class NotificationDto implements INotificationDto {
    id: number;
    typeNotification: number;
    studentId: number;
    parentId: string;
    monitorId: string | undefined;
    content: string | undefined;
    timeSent: moment.Moment;

    constructor(data?: INotificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.typeNotification = data["typeNotification"];
            this.studentId = data["studentId"];
            this.parentId = data["parentId"];
            this.monitorId = data["monitorId"];
            this.content = data["content"];
            this.timeSent = data["timeSent"] ? moment(data["timeSent"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): NotificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["typeNotification"] = this.typeNotification;
        data["studentId"] = this.studentId;
        data["parentId"] = this.parentId;
        data["monitorId"] = this.monitorId;
        data["content"] = this.content;
        data["timeSent"] = this.timeSent ? this.timeSent.toISOString() : <any>undefined;
        return data; 
    }

    clone(): NotificationDto {
        const json = this.toJSON();
        let result = new NotificationDto();
        result.init(json);
        return result;
    }
}

export interface INotificationDto {
    id: number;
    typeNotification: number;
    studentId: number;
    parentId: string;
    monitorId: string | undefined;
    content: string | undefined;
    timeSent: moment.Moment;
}

export class NotificationDtoListResultDto implements INotificationDtoListResultDto {
    result: NotificationDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: INotificationDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(NotificationDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): NotificationDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): NotificationDtoListResultDto {
        const json = this.toJSON();
        let result = new NotificationDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface INotificationDtoListResultDto {
    result: NotificationDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class CheckInRequestDto implements ICheckInRequestDto {
    studentId: number;
    monitorId: string | undefined;
    longitude: number;
    latitude: number;
    checkInType: number | undefined;
    checkInTime: moment.Moment;
    checkInResult: number;

    constructor(data?: ICheckInRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.studentId = data["studentId"];
            this.monitorId = data["monitorId"];
            this.longitude = data["longitude"];
            this.latitude = data["latitude"];
            this.checkInType = data["checkInType"];
            this.checkInTime = data["checkInTime"] ? moment(data["checkInTime"].toString()) : <any>undefined;
            this.checkInResult = data["checkInResult"];
        }
    }

    static fromJS(data: any): CheckInRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CheckInRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["studentId"] = this.studentId;
        data["monitorId"] = this.monitorId;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["checkInType"] = this.checkInType;
        data["checkInTime"] = this.checkInTime ? this.checkInTime.toISOString() : <any>undefined;
        data["checkInResult"] = this.checkInResult;
        return data; 
    }

    clone(): CheckInRequestDto {
        const json = this.toJSON();
        let result = new CheckInRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICheckInRequestDto {
    studentId: number;
    monitorId: string | undefined;
    longitude: number;
    latitude: number;
    checkInType: number | undefined;
    checkInTime: moment.Moment;
    checkInResult: number;
}

export class StudentCheckInDtoResultDto implements IStudentCheckInDtoResultDto {
    result: StudentCheckInDto;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IStudentCheckInDtoResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? StudentCheckInDto.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): StudentCheckInDtoResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StudentCheckInDtoResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): StudentCheckInDtoResultDto {
        const json = this.toJSON();
        let result = new StudentCheckInDtoResultDto();
        result.init(json);
        return result;
    }
}

export interface IStudentCheckInDtoResultDto {
    result: StudentCheckInDto;
    statusCode: string | undefined;
    message: string | undefined;
}

export class CreateStudentRequestDto implements ICreateStudentRequestDto {
    busId: number;
    parentId: string;
    stopId: number;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    classOfStudent: string | undefined;
    teacherName: string | undefined;
    phoneTeacher: string | undefined;

    constructor(data?: ICreateStudentRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.busId = data["busId"];
            this.parentId = data["parentId"];
            this.stopId = data["stopId"];
            this.name = data["name"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.classOfStudent = data["classOfStudent"];
            this.teacherName = data["teacherName"];
            this.phoneTeacher = data["phoneTeacher"];
        }
    }

    static fromJS(data: any): CreateStudentRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStudentRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["busId"] = this.busId;
        data["parentId"] = this.parentId;
        data["stopId"] = this.stopId;
        data["name"] = this.name;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["classOfStudent"] = this.classOfStudent;
        data["teacherName"] = this.teacherName;
        data["phoneTeacher"] = this.phoneTeacher;
        return data; 
    }

    clone(): CreateStudentRequestDto {
        const json = this.toJSON();
        let result = new CreateStudentRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICreateStudentRequestDto {
    busId: number;
    parentId: string;
    stopId: number;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    classOfStudent: string | undefined;
    teacherName: string | undefined;
    phoneTeacher: string | undefined;
}

export class UpdateStudentRequestDto implements IUpdateStudentRequestDto {
    id: number;
    busId: number;
    parentId: string;
    stopId: number;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    classOfStudent: string | undefined;
    teacherName: string | undefined;
    phoneTeacher: string | undefined;

    constructor(data?: IUpdateStudentRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.busId = data["busId"];
            this.parentId = data["parentId"];
            this.stopId = data["stopId"];
            this.name = data["name"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.classOfStudent = data["classOfStudent"];
            this.teacherName = data["teacherName"];
            this.phoneTeacher = data["phoneTeacher"];
        }
    }

    static fromJS(data: any): UpdateStudentRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStudentRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["busId"] = this.busId;
        data["parentId"] = this.parentId;
        data["stopId"] = this.stopId;
        data["name"] = this.name;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["classOfStudent"] = this.classOfStudent;
        data["teacherName"] = this.teacherName;
        data["phoneTeacher"] = this.phoneTeacher;
        return data; 
    }

    clone(): UpdateStudentRequestDto {
        const json = this.toJSON();
        let result = new UpdateStudentRequestDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateStudentRequestDto {
    id: number;
    busId: number;
    parentId: string;
    stopId: number;
    name: string | undefined;
    dob: moment.Moment;
    address: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    classOfStudent: string | undefined;
    teacherName: string | undefined;
    phoneTeacher: string | undefined;
}

export class UserDto implements IUserDto {
    id: string;
    fullName: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    dob: moment.Moment;
    typeAccount: number;
    status: number;
    roles: string[] | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.fullName = data["fullName"];
            this.userName = data["userName"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.typeAccount = data["typeAccount"];
            this.status = data["status"];
            if (Array.isArray(data["roles"])) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles.push(item);
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["typeAccount"] = this.typeAccount;
        data["status"] = this.status;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data; 
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto {
    id: string;
    fullName: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    dob: moment.Moment;
    typeAccount: number;
    status: number;
    roles: string[] | undefined;
}

export class UserDtoListResultDto implements IUserDtoListResultDto {
    result: UserDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IUserDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(UserDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): UserDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): UserDtoListResultDto {
        const json = this.toJSON();
        let result = new UserDtoListResultDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoListResultDto {
    result: UserDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class UserDtoPageResultDto implements IUserDtoPageResultDto {
    totalRecord: number;
    items: UserDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IUserDtoPageResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalRecord = data["totalRecord"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(UserDto.fromJS(item));
            }
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): UserDtoPageResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoPageResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRecord"] = this.totalRecord;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): UserDtoPageResultDto {
        const json = this.toJSON();
        let result = new UserDtoPageResultDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoPageResultDto {
    totalRecord: number;
    items: UserDto[] | undefined;
    statusCode: string | undefined;
    message: string | undefined;
}

export class UserDtoResultDto implements IUserDtoResultDto {
    result: UserDto;
    statusCode: string | undefined;
    message: string | undefined;

    constructor(data?: IUserDtoResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? UserDto.fromJS(data["result"]) : <any>undefined;
            this.statusCode = data["statusCode"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): UserDtoResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        return data; 
    }

    clone(): UserDtoResultDto {
        const json = this.toJSON();
        let result = new UserDtoResultDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoResultDto {
    result: UserDto;
    statusCode: string | undefined;
    message: string | undefined;
}

export class CreateUserRequestDto implements ICreateUserRequestDto {
    fullName: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    dob: moment.Moment;
    phoneNumber: string | undefined;
    typeAccount: number;
    status: number;
    password: string | undefined;
    confirmPassword: string | undefined;
    rolesName: string[] | undefined;

    constructor(data?: ICreateUserRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fullName = data["fullName"];
            this.userName = data["userName"];
            this.email = data["email"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.phoneNumber = data["phoneNumber"];
            this.typeAccount = data["typeAccount"];
            this.status = data["status"];
            this.password = data["password"];
            this.confirmPassword = data["confirmPassword"];
            if (Array.isArray(data["rolesName"])) {
                this.rolesName = [] as any;
                for (let item of data["rolesName"])
                    this.rolesName.push(item);
            }
        }
    }

    static fromJS(data: any): CreateUserRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber;
        data["typeAccount"] = this.typeAccount;
        data["status"] = this.status;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        if (Array.isArray(this.rolesName)) {
            data["rolesName"] = [];
            for (let item of this.rolesName)
                data["rolesName"].push(item);
        }
        return data; 
    }

    clone(): CreateUserRequestDto {
        const json = this.toJSON();
        let result = new CreateUserRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUserRequestDto {
    fullName: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    dob: moment.Moment;
    phoneNumber: string | undefined;
    typeAccount: number;
    status: number;
    password: string | undefined;
    confirmPassword: string | undefined;
    rolesName: string[] | undefined;
}

export class UpdateUserRequestDto implements IUpdateUserRequestDto {
    id: string;
    fullName: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    dob: moment.Moment;
    typeAccount: number;
    status: number;
    removedRoles: string[] | undefined;
    addedRoles: string[] | undefined;

    constructor(data?: IUpdateUserRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.fullName = data["fullName"];
            this.userName = data["userName"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.dob = data["dob"] ? moment(data["dob"].toString()) : <any>undefined;
            this.typeAccount = data["typeAccount"];
            this.status = data["status"];
            if (Array.isArray(data["removedRoles"])) {
                this.removedRoles = [] as any;
                for (let item of data["removedRoles"])
                    this.removedRoles.push(item);
            }
            if (Array.isArray(data["addedRoles"])) {
                this.addedRoles = [] as any;
                for (let item of data["addedRoles"])
                    this.addedRoles.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["typeAccount"] = this.typeAccount;
        data["status"] = this.status;
        if (Array.isArray(this.removedRoles)) {
            data["removedRoles"] = [];
            for (let item of this.removedRoles)
                data["removedRoles"].push(item);
        }
        if (Array.isArray(this.addedRoles)) {
            data["addedRoles"] = [];
            for (let item of this.addedRoles)
                data["addedRoles"].push(item);
        }
        return data; 
    }

    clone(): UpdateUserRequestDto {
        const json = this.toJSON();
        let result = new UpdateUserRequestDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserRequestDto {
    id: string;
    fullName: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    dob: moment.Moment;
    typeAccount: number;
    status: number;
    removedRoles: string[] | undefined;
    addedRoles: string[] | undefined;
}

export class SelectedItem implements ISelectedItem {
    id: string | undefined;
    name: string | undefined;
    selected: boolean;

    constructor(data?: ISelectedItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.selected = data["selected"];
        }
    }

    static fromJS(data: any): SelectedItem {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["selected"] = this.selected;
        return data; 
    }

    clone(): SelectedItem {
        const json = this.toJSON();
        let result = new SelectedItem();
        result.init(json);
        return result;
    }
}

export interface ISelectedItem {
    id: string | undefined;
    name: string | undefined;
    selected: boolean;
}

export class RoleAssignRequest implements IRoleAssignRequest {
    userId: string;
    roles: SelectedItem[] | undefined;

    constructor(data?: IRoleAssignRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            if (Array.isArray(data["roles"])) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles.push(SelectedItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleAssignRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RoleAssignRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        return data; 
    }

    clone(): RoleAssignRequest {
        const json = this.toJSON();
        let result = new RoleAssignRequest();
        result.init(json);
        return result;
    }
}

export interface IRoleAssignRequest {
    userId: string;
    roles: SelectedItem[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}